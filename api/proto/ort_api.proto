syntax = "proto3";

package proto;

// Combinded ClientApi
service Api {
    rpc SetAttr(Attr) returns (Attr) {}
    rpc GetAttr(Node) returns (Attr)     {}
    rpc Read(Node) returns (FileChunk) {}
    rpc Write(FileChunk) returns (WriteResponse) {}
    rpc MkDir(DirEnt) returns (DirEnt) {}
    rpc Create(DirEnt) returns (DirEnt) {}
    rpc Remove(DirEnt) returns (WriteResponse) {}
    rpc Lookup(LookupRequest) returns (DirEnt) {}
    rpc ReadDirAll(Node) returns (DirEntries) {}
}

// Node is the file inode
message Node {
    uint64 inode = 1;
}

// Lookup
message LookupRequest {
    string name   = 1;
    uint64 parent = 2; //where to lookup (inode)
}

// Attr. fields are optional by default in proto3, so
// clients don't have to send all fields when performing an
// attr update for example. These might not all be needed
// but i got tired of constantly forgetting fields.
message Attr {
    uint64 inode  = 1;
    int64  atime  = 2;
    int64  mtime  = 3;
    int64  ctime  = 4;
    int64  crtime = 5;
    uint32 mode   = 6;
    int32  valid  = 7;
    uint64 size   = 8;
}

// WriteRequest
message FileChunk {
    uint64 inode   = 1;
    int64  offset  = 2;
    bytes  payload = 3;
}

// WriteRepsonse place holder. Maybe use an enum so
// we can map to fuse errors ?
message WriteResponse {
    int32 status = 1;
}


// DirEnt is a directory entry
message DirEnt {
    string name   = 1;
    uint64 parent = 2;
    Attr   attr   = 3;
}

// DirEntries just contains a list of directory entries
message DirEntries {
    repeated DirEnt DirEntries  = 1;
    repeated DirEnt FileEntries = 2;
}

