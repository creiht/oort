syntax = "proto3";

package proto;

// Combinded ClientApi
service Api {
    rpc SetAttr(Attr) returns (Attr) {}
    rpc GetAttr(FileRequest) returns (Attr)     {}
    rpc Read(FileRequest) returns (File) {}
    rpc Write(File) returns (WriteResponse) {}
    rpc MkDir(DirEnt) returns (DirEnt) {}
    rpc Create(FileEnt) returns (FileEnt) {}
    rpc Remove(DirEnt) returns (WriteResponse) {}
    rpc Lookup(LookupRequest) returns (DirEnt) {}
    rpc ReadDirAll(FileRequest) returns (DirEntries) {}
}

// FileRequest is the file inode
message FileRequest {
    uint64 inode = 1;
}

// LookupRequest 
message LookupRequest {
    string name = 1;
    uint64 parent = 2; //where to lookup (inode)
}

// Attr. fields are optional by default in proto3, so
// clients don't have to send all fields when performing an
// attr update for example. These might not all be needed
// but i got tired of constantly forgetting fields.
message Attr {
    string name = 1;
    uint64 inode = 2;
    int64 atime = 3;
    int64 mtime = 4;
    int64 ctime = 5;
    int64 crtime = 6;
    uint32 mode = 7;
    int32 valid = 9;
    string parent = 10;
    uint64 size = 11;
}

// File contains the files name and its contents
message File {
    string name = 1;
    uint64 inode = 2;
    bytes payload = 3;
}

// WriteRepsonse place holder. Maybe use an enum so
// we can map to fuse errors ?
message WriteResponse {
    int32 status = 1;
}

// DirEntries just contains a list of directory entries
message DirEntries {
    repeated DirEnt DirEntries = 1;
    repeated FileEnt FileEntries = 2;
}

// DirEnt is a directory entry
message DirEnt {
    string name = 1;
    uint64 parent = 2;
    Attr attr = 3;
}

message FileEnt {
    string name = 1;
    uint64 parent = 2;
    Attr attr = 3;
}

