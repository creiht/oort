// Code generated by protoc-gen-go.
// source: ort_api.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	ort_api.proto

It has these top-level messages:
	FileRequest
	FileAttr
	File
	WriteResponse
	DirRequest
	DirEntries
	DirEnt
	DirAttr
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

// FileRequest is the file path we want to operate on
type FileRequest struct {
	Fpath string `protobuf:"bytes,1,opt,name=fpath" json:"fpath,omitempty"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto1.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}

// FileAttr. Fields are optional by default in proto3, so
// clients don't have to send all fields when performing an
// attr update for example.
type FileAttr struct {
	Parent string `protobuf:"bytes,1,opt,name=parent" json:"parent,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Mode   uint32 `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	Size   uint64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	Mtime  int64  `protobuf:"varint,5,opt,name=mtime" json:"mtime,omitempty"`
}

func (m *FileAttr) Reset()         { *m = FileAttr{} }
func (m *FileAttr) String() string { return proto1.CompactTextString(m) }
func (*FileAttr) ProtoMessage()    {}

// File contains the files name and its contents
type File struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto1.CompactTextString(m) }
func (*File) ProtoMessage()    {}

// WriteRepsonse place holder. Maybe use an enum so
// we can map to fuse errors ?
type WriteResponse struct {
	Status int32 `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
}

func (m *WriteResponse) Reset()         { *m = WriteResponse{} }
func (m *WriteResponse) String() string { return proto1.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()    {}

// DirRequest is the dir we want to operate on
type DirRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *DirRequest) Reset()         { *m = DirRequest{} }
func (m *DirRequest) String() string { return proto1.CompactTextString(m) }
func (*DirRequest) ProtoMessage()    {}

// DirEntries just contains a list of directory entries
type DirEntries struct {
	Entries []*DirEnt `protobuf:"bytes,1,rep" json:"Entries,omitempty"`
}

func (m *DirEntries) Reset()         { *m = DirEntries{} }
func (m *DirEntries) String() string { return proto1.CompactTextString(m) }
func (*DirEntries) ProtoMessage()    {}

func (m *DirEntries) GetEntries() []*DirEnt {
	if m != nil {
		return m.Entries
	}
	return nil
}

// DirEnt is a directory entry
type DirEnt struct {
	Name string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Attr *DirAttr `protobuf:"bytes,2,opt,name=attr" json:"attr,omitempty"`
}

func (m *DirEnt) Reset()         { *m = DirEnt{} }
func (m *DirEnt) String() string { return proto1.CompactTextString(m) }
func (*DirEnt) ProtoMessage()    {}

func (m *DirEnt) GetAttr() *DirAttr {
	if m != nil {
		return m.Attr
	}
	return nil
}

// DirAttr ...a directories attr
type DirAttr struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Inode  uint64 `protobuf:"varint,2,opt,name=inode" json:"inode,omitempty"`
	Atime  int64  `protobuf:"varint,3,opt,name=atime" json:"atime,omitempty"`
	Mtime  int64  `protobuf:"varint,4,opt,name=mtime" json:"mtime,omitempty"`
	Ctime  int64  `protobuf:"varint,5,opt,name=ctime" json:"ctime,omitempty"`
	Crtime int64  `protobuf:"varint,6,opt,name=crtime" json:"crtime,omitempty"`
	Mode   uint32 `protobuf:"varint,7,opt,name=mode" json:"mode,omitempty"`
	Valid  int32  `protobuf:"varint,9,opt,name=valid" json:"valid,omitempty"`
}

func (m *DirAttr) Reset()         { *m = DirAttr{} }
func (m *DirAttr) String() string { return proto1.CompactTextString(m) }
func (*DirAttr) ProtoMessage()    {}

// Client API for FileApi service

type FileApiClient interface {
	GetAttr(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileAttr, error)
	SetAttr(ctx context.Context, in *FileAttr, opts ...grpc.CallOption) (*FileAttr, error)
	Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error)
	Write(ctx context.Context, in *File, opts ...grpc.CallOption) (*WriteResponse, error)
}

type fileApiClient struct {
	cc *grpc.ClientConn
}

func NewFileApiClient(cc *grpc.ClientConn) FileApiClient {
	return &fileApiClient{cc}
}

func (c *fileApiClient) GetAttr(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileAttr, error) {
	out := new(FileAttr)
	err := grpc.Invoke(ctx, "/proto.FileApi/GetAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileApiClient) SetAttr(ctx context.Context, in *FileAttr, opts ...grpc.CallOption) (*FileAttr, error) {
	out := new(FileAttr)
	err := grpc.Invoke(ctx, "/proto.FileApi/SetAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileApiClient) Read(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := grpc.Invoke(ctx, "/proto.FileApi/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileApiClient) Write(ctx context.Context, in *File, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/proto.FileApi/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileApi service

type FileApiServer interface {
	GetAttr(context.Context, *FileRequest) (*FileAttr, error)
	SetAttr(context.Context, *FileAttr) (*FileAttr, error)
	Read(context.Context, *FileRequest) (*File, error)
	Write(context.Context, *File) (*WriteResponse, error)
}

func RegisterFileApiServer(s *grpc.Server, srv FileApiServer) {
	s.RegisterService(&_FileApi_serviceDesc, srv)
}

func _FileApi_GetAttr_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FileApiServer).GetAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FileApi_SetAttr_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FileAttr)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FileApiServer).SetAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FileApi_Read_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(FileRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FileApiServer).Read(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _FileApi_Write_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(File)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(FileApiServer).Write(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _FileApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.FileApi",
	HandlerType: (*FileApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttr",
			Handler:    _FileApi_GetAttr_Handler,
		},
		{
			MethodName: "SetAttr",
			Handler:    _FileApi_SetAttr_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _FileApi_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _FileApi_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for DirApi service

type DirApiClient interface {
	GetAttr(ctx context.Context, in *DirRequest, opts ...grpc.CallOption) (*FileAttr, error)
	Create(ctx context.Context, in *DirEnt, opts ...grpc.CallOption) (*WriteResponse, error)
	Remove(ctx context.Context, in *DirEnt, opts ...grpc.CallOption) (*WriteResponse, error)
	Lookup(ctx context.Context, in *DirRequest, opts ...grpc.CallOption) (*DirEnt, error)
	ReadDirAll(ctx context.Context, in *DirRequest, opts ...grpc.CallOption) (*DirEntries, error)
}

type dirApiClient struct {
	cc *grpc.ClientConn
}

func NewDirApiClient(cc *grpc.ClientConn) DirApiClient {
	return &dirApiClient{cc}
}

func (c *dirApiClient) GetAttr(ctx context.Context, in *DirRequest, opts ...grpc.CallOption) (*FileAttr, error) {
	out := new(FileAttr)
	err := grpc.Invoke(ctx, "/proto.DirApi/GetAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirApiClient) Create(ctx context.Context, in *DirEnt, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/proto.DirApi/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirApiClient) Remove(ctx context.Context, in *DirEnt, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := grpc.Invoke(ctx, "/proto.DirApi/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirApiClient) Lookup(ctx context.Context, in *DirRequest, opts ...grpc.CallOption) (*DirEnt, error) {
	out := new(DirEnt)
	err := grpc.Invoke(ctx, "/proto.DirApi/Lookup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dirApiClient) ReadDirAll(ctx context.Context, in *DirRequest, opts ...grpc.CallOption) (*DirEntries, error) {
	out := new(DirEntries)
	err := grpc.Invoke(ctx, "/proto.DirApi/ReadDirAll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DirApi service

type DirApiServer interface {
	GetAttr(context.Context, *DirRequest) (*FileAttr, error)
	Create(context.Context, *DirEnt) (*WriteResponse, error)
	Remove(context.Context, *DirEnt) (*WriteResponse, error)
	Lookup(context.Context, *DirRequest) (*DirEnt, error)
	ReadDirAll(context.Context, *DirRequest) (*DirEntries, error)
}

func RegisterDirApiServer(s *grpc.Server, srv DirApiServer) {
	s.RegisterService(&_DirApi_serviceDesc, srv)
}

func _DirApi_GetAttr_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DirRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DirApiServer).GetAttr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DirApi_Create_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DirEnt)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DirApiServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DirApi_Remove_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DirEnt)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DirApiServer).Remove(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DirApi_Lookup_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DirRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DirApiServer).Lookup(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _DirApi_ReadDirAll_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DirRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DirApiServer).ReadDirAll(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _DirApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DirApi",
	HandlerType: (*DirApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttr",
			Handler:    _DirApi_GetAttr_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DirApi_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _DirApi_Remove_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _DirApi_Lookup_Handler,
		},
		{
			MethodName: "ReadDirAll",
			Handler:    _DirApi_ReadDirAll_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
